#!/usr/bin/env ruby
require 'gli'

include GLI::App

program_desc 'Vagabond'

version Vagabond::VERSION.version

desc 'Enable debug mode'
switch [:d, :debug]

desc 'Force host provision'
switch 'force-solo'

desc 'Turn on color output'
switch [:c, :color]
default_value true

desc 'Path to vagabond file'
flag [:f, :vagabondfile]

desc 'Enable local chef server usage if available'
switch [:l, 'local-server']
default_value true

desc 'Enable callbacks'
switch :callbacks
default_value true

desc 'Automatically provision nodes'
switch 'auto-provision'
default_value true

desc 'Add delay between provisions (helpful for indexing)'
flag 'delay'
default_value 0

desc 'Build nodes in parallel'
flag 'parallel'

desc 'Build cluster of nodes'
arg_name 'cluster_name'
command :cluster do |c|
end

desc 'Create node'
arg_name 'node_name'
command :create do |c|
end

desc 'Destroy cluster of nodes referenced by provided name'
flag 'cluster'

desc 'Destroy node'
arg_name 'node_name', :multiple
command :destroy do |c|
end

desc 'Freeze node'
arg_name 'node_name'
command :freeze do |c|
end

desc 'Provision node'
arg_name 'node_name'
command :provision do |c|
end

desc 'Rebuild node'
arg_name 'node_name'
command :rebuild do |c|
end

desc 'SSH to node (or run provided command)'
arg_name 'node_name'
arg_name 'ssh_command', :optional
command :ssh do |c|
end

desc 'Start node'
arg_name 'node_name'
command :start do |c|
end

desc 'Status of given node or all nodes'
arg_name 'node_name', :optional
command :status do |c|
end

desc 'Thaw node'
arg_name 'node_name'
command :thaw do |c|
end

desc 'Auto provision node'
flag 'auto-provision'
default_value true

desc 'Create and provision node'
arg_name 'node_name'
command :up do |c|
end

command :server do |c|

  c.desc 'Upload all discovered assets to server'
  c.command :auto_upload do |c|
  end

  c.desc 'Upload all roles to server'
  c.command :upload_roles do |c|
  end

  c.desc 'Upload all data bags to server'
  c.command :upload_databags do |c|
  end

  c.desc 'Upload all environments to server'
  c.command :upload_environments do |c|
  end

  c.desc 'Upload all cookbooks to server'
  c.command :upload_cookbooks do |c|
  end

end

command :spec do |c|

  c.desc 'Run specs against real infrastructure'
  c.switch 'in-real-life'
  c.desc 'Attribute to use for SSH connection with --in-real-life'
  c.flag 'real-life-connect'
  c.desc 'Restrict to given environment'
  c.flag 'environment'
  c.desc 'Automatically destroy cluster after spec'
  c.flag 'auto-destroy'
  c.default_value true
  c.desc 'Run specs against cluster'
  c.arg_name 'cluster_name'
  c.command :cluster do
  end

  c.desc 'Run specs against node'
  c.arg_name 'node_name'
  c.command :node do
  end

  c.desc 'Run specs against cookbook'
  c.arg_name 'cookbook_name', :optional
  c.command :test do
  end

  c.desc 'Initialize directory for spec'
  c.command :init do
  end

end

command :kitchen do |c|

  c.desc 'Specify platform to test'
  c.flag :platform
  c.desc 'Suites to run'
  c.flag :suites
  c.desc 'Run tests in parallel'
  c.flag :parallel
  c.desc 'Cluster to run'
  c.flag :cluster
  c.desc 'Run kitchen tests on cookbook'
  c.arg_name 'cookbook_name', :optional
  c.command :test do |sub_c|
  end

  c.desc 'Destroy all nodes related to test'
  c.arg_name 'cookbook_name', :optional
  c.command :teardown do |sub_c|
  end

end

command :knife do
end

command :init do
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
