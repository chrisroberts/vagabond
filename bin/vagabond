#!/usr/bin/env ruby

require 'vagabond'

Bogo::Cli::Setup.define do

  description 'Build and test infrastructure layouts'

  # Version output
  on :v, :version, 'Print version' do
    puts "vagabond [Version: #{Vagabond::VERSION}] <#{Vagabond::VERSION_NAME}>"
    exit 0
  end

  # Common options
  common = lambda do
    on :d, :debug, 'Enable debug mode'
    on :F, 'force-provision', 'Force host provision'
    on :c, :color, 'Enable color output'
    on :f, :vagabondfile=, 'Path to vagabondfile'
    on :l, 'local-chef-server', 'Enable local chef server if available', :default => true
    on :C, :callbacks, 'Enable callbacks', :default => true
    on :x, :delay=, 'Add delay between provisions'
    on :p, :parallel, 'Build nodes in parallel'
    on :L, 'lock-file=', 'Global lock file (probably shouldn\'t change this)', :default => '/tmp/.vagabond.lck'
  end

  command :cluster do
    self.instance_exec(&common)
    description 'Build cluster of nodes'
    on :D, :destroy, 'Destroy cluster of nodes'
    run do |opts, args|
      Vagabond::Command::Cluster.new(opts, args).execute!
    end
  end

  command :create do
    self.instance_exec(&common)
    description 'Create node'
    run do |opts, args|
      Vagabond::Command::Create.new(opts, args).execute!
    end
  end

  command :up do
    self.instance_exec(&common)
    description 'Create and provision node'
    run do |opts, args|
      Vagabond::Command::Up.new(opts, args).execute!
    end
  end

  command :destroy do
    self.instance_exec(&common)
    description 'Destroy node'
    run do |opts, args|
      Vagabond::Command::Destroy.new(opts, args).execute!
    end
  end

  command :freeze do
    self.instance_exec(&common)
    description 'Freeze node'
    run do |opts, args|
      Vagabond::Command::Freeze.new(opts, args).execute!
    end
  end

  command :thaw do
    self.instance_exec(&common)
    description 'Thaw node'
    run do |opts, args|
      Vagabond::Command::Thaw.new(opts, args).execute!
    end
  end

  command :provision do
    self.instance_exec(&common)
    description 'Provision node'
    run do |opts, args|
      Vagabond::Command::Provision.new(opts, args).execute!
    end
  end

  command :rebuild do
    self.instance_exec(&common)
    description 'Rebuild node'
    run do |opts, args|
      Vagabond::Command::Rebuild.new(opts, args).execute!
    end
  end

  command :ssh do
    self.instance_exec(&common)
    description 'SSH to node'
    run do |opts, args|
      Vagabond::Command::Ssh.new(opts, args).execute!
    end
  end

  command :status do
    self.instance_exec(&common)
    description 'Status of node'
    run do |opts, args|
      Vagabond::Command::Status.new(opts, args).execute!
    end
  end

  command :server do
    description 'Chef server'

    command :create do
      self.instance_exec(&common)
      description 'Create local Chef server'
      run do |opts, args|
        Vagabond::Command::Server::Create.new(opts, args).execute!
      end
    end

    command :destroy do
      self.instance_exec(&common)
      description 'Destroy local Chef server'
      run do |opts, args|
        Vagabond::Command::Server::Destroy.new(opts, args).execute!
      end
    end

    command :status do
      self.instance_exec(&common)
      description 'Status of Chef server'
      run do |opts, args|
        Vagabond::Command::Server::Create.new(opts, args).execute!
      end
    end

    command :upload do
      self.instance_exec(&common)
      description 'Upload resources to chef server'

      on :C, :cookbooks, 'Upload cookbooks', :default => true
      on :R, :roles, 'Upload roles', :default => true
      on :E, :environments, 'Upload environments', :default => true
      on :D, 'data-bags', 'Upload data bags', :default => true

      run do |opts, args|
        Vagabond::Command::Server::Upload.new(opts, args).execute!
      end
    end

  end

  command :spec do
    description 'Run infrastructure specs'

    command :cluster do
      self.instance_exec(&common)
      on :I, 'in-real-life', 'Run specs against live, remote infrastructure'
      on :C, 'in-real-life-ssh-attribute', 'Node attribute to use as address for SSH connection'
      on :E, :environment=, 'Restrict to given chef environment'
      on :A, 'auto-destroy', 'Destroy cluster after successful spec'
      run do |opts, args|
        Vagabond::Command::Spec::Cluster.new(opts, args).execute!
      end
    end

    command :node do
      self.instance_exec(&common)
      description 'Run specs on existing node'
      run do |opts, args|
        Vagabond::Command::Spec::Node.new(opts, args).execute!
      end
    end

    command :init do
      self.instance_exec(&common)
      description 'Initialize spec setup'
      on :f, :force, 'Overwrite existing files'
      run do |opts, args|
        Vagabond::Command::Spec::Init.new(opts, args).execute!
      end
    end

    command :cleanup do
      self.instance_exec(&common)
      description 'Cleanup any text kitchen related nodes'
      run do |opts, args|
        Vagabond::Command::Kitchen::Cleanup.new(opts, args).execute!
      end
    end

  end

  command :test do
    description 'Run cookbook tests'

    command :test do
      self.instance_exec(&common)
      on :P, :platform=, 'Platform to test'
      on :s, :suites=, 'Suites to run (comma separated)'
      on :C, :cluster=, 'Cluster to run kitchen tests'
      on :N, 'direct-node', 'Run kitchen cookbook tests on existing node'
      on :A, 'auto-cleanup', 'Automatically cleanup nodes, even on failure'
      run do |opts, args|
        Vagabond::Command::Kitchen::Test.new(opts, args).execute!
      end
    end

    command :cleanup do
      self.instance_exec(&common)
      description 'Cleanup any text kitchen related nodes'
      run do |opts, args|
        Vagabond::Command::Kitchen::Cleanup.new(opts, args).execute!
      end
    end

  end

  command :knife do
    self.instance_exec(&common)
    description 'Proxy knife commands via vagabond'
    run do |opts, args|
      Vagabond::Command::Knife.new(opts, args).execute!
    end
  end

  command :init do
    self.instance_exec(&common)
    description 'Initialize vagabond setup'
    on :f, :force, 'Overwrite existing files'
    run do |opts, args|
      Vagabond::Command::Init.new(opts, args).execute!
    end
  end

end
